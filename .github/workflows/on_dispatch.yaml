name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version number to build'
        required: true
        type: string
jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate input
    steps:
      - run: echo "🎉 The job was manually triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "💡 Fetching tag from the __version__ dunder."
      - name: Check code version
        run: |
          echo "🖥️ Checking if versions match."
          VERSION=v$(awk -F "=" '/__version__/ {print $2}' src/dismantle/__version__.py | sed "s/[ '\"]//g")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - run: echo "💡 Checking if ${{ env.VERSION }} is the same as ${{ inputs.tag }}"
      - name: Compare version
        if: ${{ env.VERSION != inputs.tag }}
        run: |
          echo "🥵 ${{ env.VERSION }} is not ${{ inputs.tag }}"
          exit 1
      - run: echo "🎉 Validation passed."
  create-tag:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "🖥️ Generating tag ${{ inputs.tag }}."
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ inputs.tag }}
          message: "build: tag release ${{ inputs.tag }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_push_tag: true
      - run: echo "🎉 The tags ${{ inputs.tag }} and latest were successfully created."
  changelog:
    runs-on: ubuntu-latest
    needs: [validate, create-tag]
    name: Build changelog
    outputs:
      changelog: ${{ steps.build-changelog.outputs.changelog }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to build changelog."

      - id: build-changelog
        name: Build changelog
        uses: Requarks/changelog-action@v1
        with:
          tag: ${{ inputs.tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
          excludeTypes:
      - run: echo "🎉 The changelog was built successfully."
      - run: echo "🖥️ The workflow is now ready to commit the changelog."
      - run: echo "${{ github.actor }}"
      - name: Commit CHANGELOG.md
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ inputs.tag }} [skip ci]'
          file_pattern: CHANGELOG.md
          push_options: '--force'
  document:
    runs-on: ubuntu-latest
    needs: [validate, create-tag, changelog]
    name: Publish documentation
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to check git commit messages."
      - name: Set up PDM
        uses: pdm-project/setup-pdm@main
      - run: echo "🎉 PDM has been installed successfully."
      - run: echo "🖥️ Installing dependencies to build documentation."
      - name: Install dependencies
        run: |
          pdm sync -d -G document
      - run: echo "🎉 Documentation dependenies installed successfully."
      - run: echo "🖥️ building documentation."
      - name: Build documentation
        run: |
          VERSION=v$(awk -F "=" '/__version__/ {print $2}' src/dismantle/__version__.py | sed "s/[ '\"]//g")
          sed -i '/dynamic = /d' pyproject.toml
          sed -i '3i version = "${{ env.VERSION }}"' pyproject.toml
          head pyproject.toml
          pdm run document
          mkdir gh-pages
          touch gh-pages/.nojekyll
          cp -r docs/build/* gh-pages/
      - run: echo "🎉 Documentation has been built successfully."
      - run: echo "🖥️ Deploying documentation to Github Pages."
      - name: Deploy documentation
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages
          folder: gh-pages
      - run: echo "🍏 Document deployment job's status is ${{ job.status }}."
  release:
    runs-on: ubuntu-latest
    needs: [validate, create-tag, changelog, document]
    name: Create release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up PDM
        uses: pdm-project/setup-pdm@main
      - run: echo "🎉 PDM has been installed successfully."
      - run: echo "🖥️ Installing dependencies to build a distribution."
      - name: Install dependencies
        run: |
          pdm sync -d
      - run: echo "🎉 Build dependenies installed successfully."
      - run: echo "🖥️ building artifacts."
      - name: Build artifacts
        run: |
          pdm build
      - run: echo "🎉 Artifacts built successfully."
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.tag }}
          artifacts: "dist/*"
          body: "${{ needs.changelog.outputs.changelog }}"
          token: ${{ secrets.GITHUB_TOKEN }}
  publish:
    runs-on: ubuntu-latest
    name: Publish code
    needs: [validate, create-tag, changelog, document, release]
    env:
      PDM_PUBLISH_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "💡 Fetching tag from the __version__ dunder."
      - name: Get code version
        run: |
          echo "🖥️ Checking if versions match."
          VERSION=v$(awk -F "=" '/__version__/ {print $2}' src/dismantle/__version__.py | sed "s/[ '\"]//g")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - run: echo "💡 Checking if ${{ env.VERSION }} is the same as ${{ inputs.tag }}"
      - name: Compare version
        if: ${{ env.VERSION != inputs.tag }}
        run: |
          echo "🥵 ${{ env.VERSION }} is not ${{ inputs.tag }}"
          exit 1
      - run: echo "🖥️ The workflow is now ready to publish."
      - name: Set up PDM
        uses: pdm-project/setup-pdm@main
      - run: echo "🎉 PDM has been installed successfully."
      - run: echo "🖥️ Building package."
      - name: Building
        run: |
          pdm build
      - run: echo "🎉 PDM built successfully."
      - run: echo "🖥️ Publishing to PyPi"
      - name: Publishing
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - run: echo "🖥️ Generating tag latest."
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: "latest"
          message: "build: tag latest release"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force_push_tag: true
  success:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Dispatch successful
    needs: [validate, create-tag, publish, document, changelog, release]
    steps:
      - name: Check validation passed
        if: ${{ needs.validate.result != 'success' }}
        run: exit 1
      - name: Create tag passed
        if: ${{ needs.create-tag.result != 'success' }}
        run: exit 1
      - name: Check changelog status
        if: ${{ needs.changelog.result != 'success' }}
        run: exit 1
      - name: Check document matrix status
        if: ${{ needs.document.result != 'success' }}
        run: exit 1
      - name: Check release status
        if: ${{ needs.release.result != 'success' }}
        run: exit 1
      - name: Check publish matrix status
        if: ${{ needs.publish.result != 'success' }}
        run: exit 1
