name: Pull Request
on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - main
      - 'release/**'
jobs:
  commitlint:
    runs-on: ubuntu-latest
    name: Check commits
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to check git commit messages."
      - name: Check git commit messages
        uses: wagoid/commitlint-github-action@v4
      - name: Version comparison
        if: startsWith(github.head_ref, 'release/')
        run: |
          echo "🖥️ Checking if versions match."
          VERSION=v$(awk -F "=" '/__version__/ {print $2}' src/dismantle/__version__.py | sed "s/[ '\"]//g")
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          [[ "release/${VERSION}" == ${{ github.head_ref }} ]]
      - run: echo "🍏 This job's status is ${{ job.status }}."
  lint:
    runs-on: ${{ matrix.os }}
    name: Lint code
    needs: commitlint
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest]
    steps:
      - run: echo "🎉 The lint job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to run linting."
      - name: Set up PDM
        uses: pdm-project/setup-pdm@06d2d28e101eae9f872114db9143d9d6ee6878c7
        with:
          version: 1.15.4
          python-version: ${{ matrix.python-version }}
      - run: echo "🎉 PDM has been installed successfully."
      - run: echo "🖥️ Installing dependencies to run linting."
      - name: Install dependencies
        run: |
          pdm sync -d -G lint
      - run: echo "🎉 Linting dependenies installed successfully."
      - run: echo "🖥️ Running linting."
      - name: Run linting
        run: |
          pdm run lint
      - run: echo "🍏 This linting job's status is ${{ job.status }}."
  test:
    runs-on: ${{ matrix.os }}
    name: Unit tests
    needs: commitlint
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - run: echo "🎉 The lint job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to run unit testing."
      - name: Set up PDM
        uses: pdm-project/setup-pdm@06d2d28e101eae9f872114db9143d9d6ee6878c7
        with:
          version: 1.15.4
          python-version: ${{ matrix.python-version }}
      - run: echo "🎉 PDM has been installed successfully."
      - run: echo "🖥️ Installing dependencies to run unit tests."
      - name: Install dependencies
        run: |
          pdm sync -d -G test
      - run: echo "🎉 Unit testing dependenies installed successfully."
      - run: echo "🖥️ Running unit tests."
      - name: Unit tests
        run: |
          pdm run test
      - run: echo "🍏 This linting job's status is ${{ job.status }}."
  success:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Lint & Test (matrix)
    needs: [lint, test]
    steps:
      - name: Check lint matrix status
        if: ${{ needs.lint.result != 'success' }}
        run: exit 1
      - name: Check test matrix status
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
